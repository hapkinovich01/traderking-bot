import os
import json
import time
import math
import asyncio
from datetime import datetime, timezone

import requests
import pandas as pd
import yfinance as yf
from ta.momentum import RSIIndicator
from ta.trend import EMAIndicator, MACD

# ==============================
# ‚öôÔ∏è ENV / CONFIG
# ==============================
CAPITAL_API_KEY       = os.environ.get("CAPITAL_API_KEY", "")
CAPITAL_USERNAME      = os.environ.get("CAPITAL_USERNAME", "")
CAPITAL_API_PASSWORD  = os.environ.get("CAPITAL_API_PASSWORD", "")
CAPITAL_BASE_URL      = os.environ.get("CAPITAL_BASE_URL", "https://api-capital.backend-capital.com")

TELEGRAM_TOKEN        = os.environ.get("TELEGRAM_TOKEN", "")
TELEGRAM_CHAT_ID      = os.environ.get("TELEGRAM_CHAT_ID", "")

# –°—Ç—Ä–∞—Ç–µ–≥–∏—è / —Ä–∏—Å–∫
CHECK_INTERVAL_SEC    = int(os.environ.get("CHECK_INTERVAL_SEC", "300"))  # –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
HISTORY_PERIOD        = os.environ.get("HISTORY_PERIOD", "1mo")
HISTORY_INTERVAL      = os.environ.get("HISTORY_INTERVAL", "1h")

LEVERAGE              = float(os.environ.get("LEVERAGE", "20"))     # 1:20
POSITION_FRACTION     = float(os.environ.get("POSITION_FRACTION", "0.25"))  # 25% –∫–∞–ø–∏—Ç–∞–ª–∞
SL_PCT                = float(os.environ.get("SL_PCT", "0.006"))    # 0.6% —Å—Ç–æ–ø
TP_MULT               = float(os.environ.get("TP_MULT", "2.0"))     # —Ç–µ–π–∫ = 2x —Å—Ç–æ–ø
TRADE_ENABLED         = os.environ.get("TRADE_ENABLED", "True").lower() == "true"

# –°–∏–º–≤–æ–ª—ã
SYMBOLS = {
    "Gold":  {"yf": "GC=F", "epic": "CS.D.GC.MONTH1",    "query": "gold"},
    "Brent": {"yf": "BZ=F", "epic": "CS.D.BRENT.MONTH1", "query": "brent"},
    "Gas":   {"yf": "NG=F", "epic": "CS.D.NATGAS.MONTH1","query": "natural gas"},
}

# –î–µ—Ä–∂–∏–º —Å–µ—Å—Å–∏–æ–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã Capital
TOKENS = {"CST": "", "X-SECURITY-TOKEN": ""}

# –ß—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å ‚Äî –∑–∞–ø–æ–º–∏–Ω–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–∏–≥–Ω–∞–ª/–ø–æ–∑–∏—Ü–∏—é
LAST_SIGNAL = {k: "HOLD" for k in SYMBOLS.keys()}


# ==============================
# üîß UTILS
# ==============================
def ts() -> str:
    return datetime.now(timezone.utc).strftime("%Y-%m-%d %H:%M:%S UTC")

def log(msg: str):
    print(f"[{ts()}] {msg}", flush=True)

def tg(text: str):
    if not TELEGRAM_TOKEN or not TELEGRAM_CHAT_ID:
        log(f"TG> {text}")
        return
    try:
        requests.post(
            f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage",
            json={"chat_id": TELEGRAM_CHAT_ID, "text": text},
            timeout=12
        )
    except Exception as e:
        log(f"‚ö†Ô∏è Telegram error: {e}")

def cap_headers():
    return {
        "X-CAP-API-KEY": CAPITAL_API_KEY,
        "CST": TOKENS.get("CST", ""),
        "X-SECURITY-TOKEN": TOKENS.get("X-SECURITY-TOKEN", ""),
        "Accept": "application/json",
        "Content-Type": "application/json"
    }

def safe_req(method, url, retries=3, **kwargs):
    for i in range(retries):
        try:
            r = requests.request(method, url, timeout=20, **kwargs)
            if r.status_code in (200, 201, 400, 401, 404, 409):
                return r
            log(f"HTTP {r.status_code} on {url}: {r.text}")
        except Exception as e:
            log(f"Req error [{i+1}/{retries}] {method} {url}: {e}")
        time.sleep(1.5)
    return None


# ==============================
# üîê CAPITAL AUTH
# ==============================
def capital_login() -> bool:
    url = f"{CAPITAL_BASE_URL}/api/v1/session"
    data = {"identifier": CAPITAL_USERNAME, "password": CAPITAL_API_PASSWORD}
    base_headers = {"X-CAP-API-KEY": CAPITAL_API_KEY, "Content-Type": "application/json"}

    try:
        r = requests.post(url, headers=base_headers, json=data, timeout=20)
        if r.status_code == 200:
            TOKENS["CST"] = r.headers.get("CST", "")
            TOKENS["X-SECURITY-TOKEN"] = r.headers.get("X-SECURITY-TOKEN", "")
            log("‚úÖ Capital login OK")
            return True
        log(f"‚ùå Capital login failed: {r.status_code} {r.text}")
        return False
    except Exception as e:
        log(f"‚ùå Capital login exception: {e}")
        return False


# ==============================
# üí∞ BALANCE / POSITIONS
# ==============================
def capital_balance():
    """–ü—ã—Ç–∞–µ–º—Å—è –≤—ã—Ç–∞—â–∏—Ç—å –±–∞–ª–∞–Ω—Å (–Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–∑–º–æ–∂–Ω—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤)."""
    for endpoint in ("/api/v1/accounts/me", "/api/v1/accounts"):
        url = f"{CAPITAL_BASE_URL}{endpoint}"
        r = safe_req("GET", url, headers=cap_headers())
        if r and r.status_code == 401:
            if not capital_login():
                return None
            r = safe_req("GET", url, headers=cap_headers())
        if r and r.status_code == 200:
            try:
                data = r.json()
                # —Ä–∞–∑–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã ‚Äî –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
                if isinstance(data, dict):
                    ai = data.get("accountInfo") or data.get("account", {}).get("balance") or {}
                    bal = ai.get("available") or ai.get("balance") or 0.0
                    return float(bal)
                elif isinstance(data, list) and data:
                    ai = data[0].get("balance") or {}
                    bal = ai.get("available") or ai.get("balance") or 0.0
                    return float(bal)
            except Exception:
                pass
    return None

def capital_positions():
    """–¢–µ–∫—É—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏ (–¥–ª—è –ø–æ–∏—Å–∫–∞ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ —ç–ø–∏–∫–∞–º)."""
    url = f"{CAPITAL_BASE_URL}/api/v1/positions"
    r = safe_req("GET", url, headers=cap_headers())
    if r and r.status_code == 401:
        if not capital_login():
            return []
        r = safe_req("GET", url, headers=cap_headers())
    if r and r.status_code == 200:
        try:
            data = r.json()
            return data.get("positions") or data  # –∏–Ω–æ–≥–¥–∞ –º–∞—Å—Å–∏–≤
        except Exception:
            return []
    return []


# ==============================
# üíµ PRICE with FALLBACK
# ==============================
def capital_price(epic: str, name: str):
    """–ü—Ä–æ–±—É–µ–º /prices, –µ—Å–ª–∏ 401 ‚Äî –ø–µ—Ä–µ–ª–æ–≥–∏–Ω–∏–≤–∞–µ–º—Å—è; –∏–Ω–∞—á–µ ‚Äî Yahoo fallback."""
    try:
        # Capital price
        url = f"{CAPITAL_BASE_URL}/api/v1/prices/{epic}"
        r = safe_req("GET", url, headers=cap_headers())
        if r and r.status_code == 401:
            if not capital_login():
                return None
            r = safe_req("GET", url, headers=cap_headers())

        if r and r.status_code == 200:
            arr = r.json().get("prices") or []
            if arr:
                p = arr[-1]
                bid = float(p.get("bid", 0) or 0)
                ask = float(p.get("offer", 0) or 0)
                mid = (bid + ask) / 2 if (bid and ask) else (bid or ask or 0)
                if mid:
                    log(f"‚úÖ {name} price Capital = {mid}")
                    return {"bid": bid, "ask": ask, "mid": mid}

        # Fallback Yahoo
        yf_ticker = SYMBOLS[name]["yf"]
        log(f"‚ö†Ô∏è {name}: no Capital price (code {r.status_code if r else 'n/a'}). Fallback to Yahoo‚Ä¶")
        df = yf.download(yf_ticker, period="1d", interval="1h", progress=False)
        if not df.empty:
            px = float(df["Close"].iloc[-1])
            log(f"‚úÖ {name} price Yahoo = {px}")
            return {"bid": px, "ask": px, "mid": px}
        log(f"‚ùå {name}: no price from Yahoo either.")
        return None
    except Exception as e:
        log(f"‚ùå capital_price({name}) error: {e}")
        return None


# ==============================
# üìä INDICATORS & SIGNAL
# ==============================
def calc_indicators(df: pd.DataFrame):
    df = df.copy()
    df["EMA20"] = EMAIndicator(df["Close"], window=20).ema_indicator()
    df["EMA50"] = EMAIndicator(df["Close"], window=50).ema_indicator()
    df["RSI"]   = RSIIndicator(df["Close"]).rsi()
    macd        = MACD(df["Close"])
    df["MACD"]  = macd.macd()
    df["SIGN"]  = macd.macd_signal()
    return df

def decide(df: pd.DataFrame) -> str:
    """–°–≤–æ–¥–∏–º EMA/RSI/MACD –≤ –ø—Ä–æ—Å—Ç–æ–π —Å–∏–≥–Ω–∞–ª BUY/SELL/HOLD."""
    try:
        last = df.iloc[-1]
        ema   = "BUY" if last["EMA20"] > last["EMA50"] else "SELL"
        rsi   = "BUY" if last["RSI"] < 35 else "SELL" if last["RSI"] > 65 else "HOLD"
        macd  = "BUY" if last["MACD"] > last["SIGN"]  else "SELL"
        if ema == "BUY" and rsi == "BUY" and macd == "BUY":
            return "BUY"
        if ema == "SELL" and rsi == "SELL" and macd == "SELL":
            return "SELL"
        return "HOLD"
    except Exception as e:
        log(f"decide() error: {e}")
        return "HOLD"


# ==============================
# üìê SIZING / SL-TP
# ==============================
def compute_order_params(price_mid: float, balance: float, name: str):
    """–†–∞—Å—á—ë—Ç —Ä–∞–∑–º–µ—Ä–∞ –∏ —É—Ä–æ–≤–Ω–µ–π SL/TP. –†–∞–∑–º–µ—Ä ‚Äî –≤ ¬´–∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞—Ö¬ª (–ø—Ä–∏–±–ª–∏–∂—ë–Ω–Ω–æ)."""
    if price_mid <= 0 or balance is None:
        return None

    risk_cap = balance * POSITION_FRACTION * LEVERAGE  # ¬´—Ä—ã—á–∞–≥–æ–º¬ª
    size_raw = risk_cap / price_mid
    # –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ/–Ω–æ—Ä–º–∞–ª—å–Ω—ã–µ —à–∞–≥–∏ (–≥—Ä—É–±–æ, —á—Ç–æ–±—ã –Ω–µ 0.0001)
    step = 0.1 if name in ("Gold", "Brent", "Gas") else 1.0
    size = max(step, math.floor(size_raw / step) * step)

    sl_abs = price_mid * SL_PCT
    tp_abs = sl_abs * TP_MULT

    return {
        "size": round(size, 2),
        "sl":   round(sl_abs, 2),
        "tp":   round(tp_abs, 2),
    }


# ==============================
# üü¢ OPEN / üî¥ CLOSE via Capital
# ==============================
def capital_open_market(epic: str, direction: str, price_mid: float, params: dict, currency="USD"):
    """
    –°–æ–∑–¥–∞–Ω–∏–µ MARKET –ø–æ–∑–∏—Ü–∏–∏ —Å —É—Ä–æ–≤–Ω–µ–º SL/TP.
    –§–æ—Ä–º–∞—Ç —Ç–µ–ª–∞ ‚Äî –æ—Ä–∏–µ–Ω—Ç–∏—Ä –ø–æ –ø—É–±–ª–∏—á–Ω–æ–π —Å—Ö–µ–º–µ Capital/IG (–º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è —É –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞).
    –°–∫—Ä–∏–ø—Ç –ø–µ—á–∞—Ç–∞–µ—Ç –æ—Ç–≤–µ—Ç API ‚Äî –ø–æ –Ω–∏–º –ª–µ–≥–∫–æ –ø–æ–¥—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–ª—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.
    """
    if not epic or not direction or not params:
        return False, "bad params"

    level_sl = price_mid - params["sl"] if direction == "BUY"  else price_mid + params["sl"]
    level_tp = price_mid + params["tp"] if direction == "BUY"  else price_mid - params["tp"]

    body = {
        "epic": epic,
        "direction": direction,        # BUY / SELL
        "size": params["size"],        # –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
        "orderType": "MARKET",
        "guaranteedStop": False,
        "forceOpen": True,
        "stopLevel": round(level_sl, 2),
        "limitLevel": round(level_tp, 2),
        "currencyCode": currency
    }

    url = f"{CAPITAL_BASE_URL}/api/v1/positions/otc"
    r = safe_req("POST", url, headers=cap_headers(), data=json.dumps(body))
    if r and r.status_code in (200, 201):
        log(f"‚úÖ OPEN OK: {r.text}")
        return True, r.text
    else:
        log(f"‚ùå OPEN ERR [{r.status_code if r else 'no-resp'}]: {r.text if r else ''}")
        return False, r.text if r else "no response"

def capital_close_positions(epic: str):
    """
    –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–∫—Ä—ã—Ç—å –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –ø–æ epic.
    –í —Ä–∞–∑–Ω—ã—Ö —Å—Ö–µ–º–∞—Ö API –∑–∞–∫—Ä—ã—Ç–∏–µ –º–æ–∂–µ—Ç –∏–¥—Ç–∏ —á–µ—Ä–µ–∑ DELETE /positions/otc/{dealId}
    –∏–ª–∏ POST –Ω–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π endpoint. –ù–∏–∂–µ ‚Äî ¬´—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è¬ª –ø–æ–ø—ã—Ç–∫–∞.
    """
    pos = capital_positions()
    closed_ok = 0
    for p in pos:
        try:
            deal_id = p.get("position", {}).get("dealId") or p.get("dealId")
            p_epic  = p.get("market", {}).get("epic") or p.get("epic")
            if not deal_id or p_epic != epic:
                continue
            url = f"{CAPITAL_BASE_URL}/api/v1/positions/otc/{deal_id}"
            r = safe_req("DELETE", url, headers=cap_headers())
            if r and r.status_code in (200, 204):
                closed_ok += 1
            else:
                log(f"‚ùå CLOSE ERR [{r.status_code if r else 'no-resp'}] {deal_id}: {r.text if r else ''}")
        except Exception as e:
            log(f"close err: {e}")
    return closed_ok


# ==============================
# üîÅ MAIN LOOP
# ==============================
async def main_loop():
    tg(f"ü§ñ TraderKing –∑–∞–ø—É—â–µ–Ω (Render). –ê–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª—è: {'–í–ö–õ' if TRADE_ENABLED else '–í–´–ö–õ'}. –ò–Ω—Ç–µ—Ä–≤–∞–ª: {CHECK_INTERVAL_SEC//60}–º.")
    if not capital_login():
        tg("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ Capital!")
        return

    while True:
        try:
            balance = capital_balance()
            if balance is None:
                log("‚ö†Ô∏è balance unknown (continue)")

            for name, meta in SYMBOLS.items():
                epic = meta["epic"]
                # 1) –¶–µ–Ω–∞
                px = capital_price(epic, name)
                if not px:
                    tg(f"‚ö†Ô∏è {name}: –Ω–µ—Ç —Ü–µ–Ω—ã (Capital/Yahoo) ‚Äî –ø—Ä–æ–ø—É—Å–∫")
                    continue

                # 2) –ò—Å—Ç–æ—Ä–∏—è –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ (—á–µ—Ä–µ–∑ Yahoo)
                df = yf.download(meta["yf"], period=HISTORY_PERIOD, interval=HISTORY_INTERVAL, progress=False)
                if df.empty or "Close" not in df.columns:
                    tg(f"‚ö†Ô∏è {name}: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∏—Å—Ç–æ—Ä–∏–∏ {HISTORY_PERIOD}/{HISTORY_INTERVAL}")
                    continue

                df = calc_indicators(df)
                signal = decide(df)

                # 3) –û—Ç–ø—Ä–∞–≤–∏–º –∫—Ä–∞—Ç–∫–∏–π –æ—Ç—á—ë—Ç
                last = df.iloc[-1]
                tg(f"{name} | Price: {px['mid']:.2f} | RSI: {last['RSI']:.2f} | "
                   f"EMA20/50: {last['EMA20']:.2f}/{last['EMA50']:.2f} | MACD: {last['MACD']:.2f}/{last['SIGN']:.2f} "
                   f"‚Üí {signal}")

                # 4) –ê–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª—è
                if not TRADE_ENABLED or signal == "HOLD":
                    LAST_SIGNAL[name] = signal
                    continue

                # –û—Ç–∫—Ä—ã–≤–∞—Ç—å ‚Äî —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è —Å–∏–≥–Ω–∞–ª –∏ –Ω–µ—Ç –ø–æ–∑–∏—Ü–∏–∏/–∏–ª–∏ –ø–æ–∑–∏—Ü–∏—è –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–∞—è
                if signal != LAST_SIGNAL[name]:
                    # –ó–∞–∫—Ä—ã—Ç—å –≤—Å—ë –ø–æ —ç—Ç–æ–º—É epic (–µ—Å–ª–∏ –µ—Å—Ç—å)
                    closed = capital_close_positions(epic)  # –ø—Ä–æ–±—É–µ–º –∑–∞–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏–∏ –ø–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—É
                    if closed:
                        tg(f"üî¥ –ó–∞–∫—Ä—ã—Ç–æ –ø–æ–∑–∏—Ü–∏–π –ø–æ {name}: {closed}")

                    # –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ä–∞–∑–º–µ—Ä
                    params = compute_order_params(px["mid"], balance, name)
                    if not params:
                        tg(f"‚ö†Ô∏è {name}: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—á–∏—Ç–∞—Ç—å —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏")
                        LAST_SIGNAL[name] = signal
                        continue

                    ok, resp = capital_open_market(epic, signal, px["mid"], params)
                    if ok:
                        tg(f"üü¢ –û—Ç–∫—Ä—ã—Ç {signal} –ø–æ {name} | size={params['size']}, SL={params['sl']}, TP={params['tp']}")
                    else:
                        tg(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è {signal} –ø–æ {name}: {resp}")

                    LAST_SIGNAL[name] = signal
                else:
                    # —Ç–æ—Ç –∂–µ —Å–∏–≥–Ω–∞–ª ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
                    pass

            await asyncio.sleep(CHECK_INTERVAL_SEC)

        except Exception as e:
            log(f"MAIN LOOP error: {e}")
            time.sleep(3)


# ==============================
# üöÄ RUN
# ==============================
if __name__ == "__main__":
    asyncio.run(main_loop())
