import os
import time
import json
import math
import asyncio
import traceback
from datetime import datetime, timezone
import requests
import pandas as pd
import numpy as np
import yfinance as yf
import os, requests

url = "https://api-capital.backend-capital.com/api/v1/session"
payload = {
    "identifier": os.environ.get("CAPITAL_USERNAME"),
    "password": os.environ.get("CAPITAL_API_PASSWORD")
}
headers = {
    "X-CAP-API-KEY": os.environ.get("CAPITAL_API_KEY"),
    "Content-Type": "application/json"
}

r = requests.post(url, json=payload, headers=headers)
print("Login test status:", r.status_code, r.text)
exit()
# ==========================
# ENV CONFIG
# ==========================

CAPITAL_API_KEY = os.environ.get("CAPITAL_API_KEY", "")
CAPITAL_API_PASSWORD = os.environ.get("CAPITAL_API_PASSWORD", "")
CAPITAL_USERNAME = os.environ.get("CAPITAL_USERNAME", "")
CAPITAL_BASE_URL = os.environ.get("CAPITAL_BASE_URL", "https://api-capital.backend-capital.com")

TELEGRAM_TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN", "")
TELEGRAM_CHAT_ID = os.environ.get("TELEGRAM_CHAT_ID", "")

CHECK_INTERVAL_SEC = int(os.environ.get("CHECK_INTERVAL_SEC", "300"))
HISTORY_PERIOD = os.environ.get("HISTORY_PERIOD", "3mo")
HISTORY_INTERVAL = os.environ.get("HISTORY_INTERVAL", "1h")

LEVERAGE = float(os.environ.get("LEVERAGE", "20"))
POSITION_FRACTION = float(os.environ.get("POSITION_FRACTION", "0.25"))
SL_PCT = float(os.environ.get("SL_PCT", "0.005"))   # 0.5% —Å—Ç–æ–ø
TP_PCT = float(os.environ.get("TP_PCT", "0.010"))   # 1% —Ç–µ–π–∫

SYMBOLS = {
    "GOLD": {"epic": "IX.D.GC.FEB25.IP", "yf": "GC=F"},
    "OIL_BRENT": {"epic": "IX.D.BRENT.F25.IP", "yf": "BZ=F"},
    "NATGAS": {"epic": "IX.D.NATGAS.F25.IP", "yf": "NG=F"},
}

# ==========================
# GLOBAL STATE
# ==========================

ACTIVE_POSITIONS = {}

# ==========================
# HELPERS
# ==========================

def log(msg: str):
    """–õ–æ–≥ –≤ –∫–æ–Ω—Å–æ–ª—å –∏ Telegram"""
    text = f"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] {msg}"
    print(text, flush=True)
    try:
        if TELEGRAM_TOKEN and TELEGRAM_CHAT_ID:
            requests.post(
                f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage",
                json={"chat_id": TELEGRAM_CHAT_ID, "text": text},
                timeout=10
            )
    except Exception:
        pass


def capital_headers():
    return {
        "X-SECURITY-TOKEN": os.environ.get("X-SECURITY-TOKEN", ""),
        "CST": os.environ.get("CST", ""),
        "Accept": "application/json",
        "Content-Type": "application/json",
    }


async def capital_login():
    """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Capital"""
    try:
        r = requests.post(
            f"{CAPITAL_BASE_URL}/api/v1/session",
            json={"identifier": CAPITAL_USERNAME, "password": CAPITAL_API_PASSWORD},
            headers={"Content-Type": "application/json"},
            timeout=10
        )
        if r.status_code == 200:
            data = r.json()
            os.environ["X-SECURITY-TOKEN"] = data["securityToken"]
            os.environ["CST"] = data["clientSessionId"]
            log("‚úÖ Capital login OK")
            return True
        else:
            log(f"üî• Capital login failed: {r.text}")
            return False
    except Exception as e:
        log(f"üî• Capital login exception: {e}")
        return False


def get_yahoo_data(symbol):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å Yahoo"""
    try:
        df = yf.download(symbol, period=HISTORY_PERIOD, interval=HISTORY_INTERVAL, progress=False, timeout=10)
        if df is None or df.empty:
            return None
        df = df[["Close"]].dropna()
        df["EMA20"] = df["Close"].ewm(span=20).mean()
        df["Signal"] = np.where(df["Close"] > df["EMA20"], "BUY", "SELL")
        return df
    except Exception as e:
        log(f"‚ö†Ô∏è Yahoo data error for {symbol}: {e}")
        return None


def capital_order(epic, direction, size, stop_loss=None, take_profit=None):
    """–û—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏"""
    try:
        payload = {
            "epic": epic,
            "direction": direction,
            "size": size,
            "orderType": "MARKET",
            "guaranteedStop": False,
        }

        # –î–æ–±–∞–≤–ª—è–µ–º SL/TP –µ—Å–ª–∏ –∑–∞–¥–∞–Ω—ã
        if stop_loss and take_profit:
            payload["stopLevel"] = stop_loss
            payload["limitLevel"] = take_profit

        r = requests.post(
            f"{CAPITAL_BASE_URL}/api/v1/positions",
            headers=capital_headers(),
            json=payload,
            timeout=10
        )

        if r.status_code == 200:
            return True
        else:
            log(f"‚ùå Order fail: {r.text}")
            return False
    except Exception as e:
        log(f"‚ùå Exception in order: {e}")
        return False


def close_position(epic, direction):
    """–ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏"""
    try:
        opposite = "SELL" if direction == "BUY" else "BUY"
        r = requests.post(
            f"{CAPITAL_BASE_URL}/api/v1/positions/otc",
            headers=capital_headers(),
            json={
                "epic": epic,
                "direction": opposite,
                "size": 1.0,
                "orderType": "MARKET",
                "guaranteedStop": False
            },
            timeout=10
        )
        if r.status_code == 200:
            log(f"‚úÖ –ü–æ–∑–∏—Ü–∏—è {epic} –∑–∞–∫—Ä—ã—Ç–∞ ({opposite})")
            return True
        else:
            log(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ {epic}: {r.text}")
            return False
    except Exception as e:
        log(f"‚ùå Exception close_position: {e}")
        return False


# ==========================
# MAIN LOGIC
# ==========================

async def process_symbol(symbol_name, data):
    epic = data["epic"]
    yf_symbol = data["yf"]

    df = get_yahoo_data(yf_symbol)
    if df is None:
        log(f"‚ö†Ô∏è {symbol_name}: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö —Å Yahoo")
        return

    signal = df["Signal"].iloc[-1]
    price = df["Close"].iloc[-1]
    log(f"{symbol_name}: —Å–∏–≥–Ω–∞–ª {signal} –ø—Ä–∏ —Ü–µ–Ω–µ {price}")

    current = ACTIVE_POSITIONS.get(symbol_name)

    # TP –∏ SL —É—Ä–æ–≤–Ω–∏
    if signal == "BUY":
        sl = price * (1 - SL_PCT)
        tp = price * (1 + TP_PCT)
    else:
        sl = price * (1 + SL_PCT)
        tp = price * (1 - TP_PCT)

    # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å—Ç–∞—Ä–æ–π –ø–æ–∑–∏—Ü–∏–∏ –ø—Ä–∏ —Å–º–µ–Ω–µ —Å–∏–≥–Ω–∞–ª–∞
    if current and current != signal:
        log(f"üîÅ {symbol_name}: —Å–∏–≥–Ω–∞–ª –∏–∑–º–µ–Ω–∏–ª—Å—è {current} ‚Üí {signal}, –∑–∞–∫—Ä—ã–≤–∞—é...")
        close_position(epic, current)
        ACTIVE_POSITIONS.pop(symbol_name, None)

    # –ï—Å–ª–∏ –ø–æ–∑–∏—Ü–∏–∏ –Ω–µ—Ç ‚Äî –æ—Ç–∫—Ä—ã–≤–∞–µ–º
    if symbol_name not in ACTIVE_POSITIONS:
        success = capital_order(epic, signal, size=1.0, stop_loss=sl, take_profit=tp)
        if success:
            ACTIVE_POSITIONS[symbol_name] = signal
            log(f"‚úÖ {symbol_name}: {signal} –æ—Ç–∫—Ä—ã—Ç–∞. SL={round(sl,2)} TP={round(tp,2)}")
        else:
            log(f"‚ùå {symbol_name}: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é")


async def main_loop():
    log("ü§ñ TraderKing v3 –∑–∞–ø—É—â–µ–Ω. –ê–≤—Ç–æ TP/SL + –∑–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏ —Å–º–µ–Ω–µ —Å–∏–≥–Ω–∞–ª–∞. –†–∞–±–æ—Ç–∞ 24/7.")

    while True:
        try:
            if not await capital_login():
                await asyncio.sleep(60)
                continue

            for symbol_name, data in SYMBOLS.items():
                await process_symbol(symbol_name, data)

            log("=== üîÅ –¶–∏–∫–ª –∑–∞–≤–µ—Ä—à—ë–Ω, –∂–¥—É —Å–ª–µ–¥—É—é—â–∏–π ===")
            await asyncio.sleep(CHECK_INTERVAL_SEC)

        except Exception as e:
            log(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ü–∏–∫–ª–∞: {e}")
            traceback.print_exc()
            await asyncio.sleep(30)


if __name__ == "__main__":
    asyncio.run(main_loop())
